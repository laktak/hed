#!/usr/bin/env node

var hed=require("../lib/hed");
var Hjson=require("hjson");
var fs=require("fs");
var os=require("os");
var path=require("path");

var configFile=path.join(os.homedir(), ".hed.hjson");
var args={}, argv=[];
process.argv.slice(2).forEach(function(x) {
  var i;
  if (x[0]==="-") { i=x.indexOf("="); args[x.substr(1, i>0?i-1:undefined)]=i>0?x.substr(i+1):true; }
  else argv.push(x);
});

var config={};
if (fs.existsSync(configFile)) {
  try { config=Hjson.parse(fs.readFileSync(configFile, "utf8")); }
  catch (err) {
    console.error("Could not load config: "+err.message);
    //process.exit(-1);
  }
}

var defaultEditor=process.platform==="win32"?"notepad":"vi";
var editor=config.editor||process.env.EDITOR||defaultEditor;

if (args["-help"] || args["?"] || args.h) {
  console.error("hed, an edit tool for JSON configs. Comments are preserved outside of JSON.");
  console.error();
  console.error("Usage:");
  console.error("  hed [OPTIONS] FILE");
  console.error("  hed (-h | --help | -?)");
  console.error("  hed (-V | --version)");
  console.error("  hed --config [EDITOR]");
  console.error();
  console.error("hed allows you to use comments and avoid missing/trailing comma mistakes, even with configs like npm's package.json where comments are forbidden.");
  console.error("For details see https://github.com/laktak/hed");
  console.error();
  console.error("Options:");
  console.error("  -e        edit JSON with comments (default).");
  console.error("  -s        show JSON with comments.");
  console.error("  --config  edit the hed config.");
  return;
}
else if (args.V || args["-version"]) {
  console.log("Hjson version:" + Hjson.version);
  return;
}
else if (args["-config"]) {
  if (argv.length==1) editor=argv[0];
  argv=[configFile];
}
else if (argv.length!==1) {
  console.error("missing argument, see hed --help");
  process.exit(-1);
}

if (!fs.existsSync(configFile)) {
  var defaultConfig=Hjson.rt.parse(fs.readFileSync(path.join(__dirname, "../defaultConfig.hjson"), "utf8"));
  defaultConfig.editor=editor;
  try { fs.writeFileSync(configFile, Hjson.rt.stringify(defaultConfig), "utf8"); }
  catch (err) {}
}

if (args.s) {
  // show
  hed.show(argv[0]).then(function(data) {
    process.stdout.write(Hjson.rt.stringify(data, {
      colors: true,
    })+"\n");
  });
  return;
}

var stdin, onChar;

function onError(err) {
  return new Promise(function(resolve, reject) {
    console.error("error: "+(err.message||err));

    if (!stdin) {
      stdin=process.stdin;
      stdin.setRawMode( true );
      stdin.on('data', function (key) {
        if (key) onChar(key.toString());
      });
    }
    onChar=function(key) {
      stdin.pause();
      console.log(key);
      if (key!=='d') resolve(); else reject("aborted");
    };
    process.stdout.write("any key to reopen, d to discard: ");
    stdin.resume();
  });
}

hed.edit(argv[0], { editor: editor, status: console.log, onError: onError })
.catch(function(err) {
  console.error("error: "+err);
});
